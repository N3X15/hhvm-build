#!/usr/bin/python
'''
A Crappy HHVM Compiler

run with ./hhvm-build debian jessie 3.3
'''
import os, sys, yaml, tempfile, re, shutil, logging, subprocess, datetime, glob

script_dir = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(script_dir, 'lib', 'buildtools'))

from buildtools import *
from buildtools.wrapper import CMake, FPM, configure_ccache, configure_cotire, configure_distcc

def bool2yn(b):
    return 'Y' if b else 'N'
        
def cleanDir(dir):
    for the_file in os.listdir(dir):
        file_path = os.path.join(dir, the_file)
        try:
            if os.path.isfile(file_path):
                os.unlink(file_path)
            else:
                shutil.rmtree(file_path)
        except Exception, e:
            log.error(e)
            sys.exit(1)
            
def mkdirOrClear(dir):
    if not os.path.isdir(dir):
        log.info('Creating {}'.format(dir))
        os.makedirs(dir)
    else:
        log.info('Clearing %s', dir)
        cleanDir(dir)
    
def dictToTuples(inp):
    return [(k, v) for k, v in inp.items()]

def handleIf(operators, pkg_cfg, var_replacements):
    if len(operators):
        for expr in operators:
            (operator, args) = dictToTuples(expr)[0]
            if isinstance(args, str):
                args = args.split(' ')
            args = [replace_vars(arg, var_replacements) for arg in args]
            if operator == 'file-exists':
                if not os.path.exists(args[0]): return False
            else:
                log.warn('Invalid operator %s', operator)
        return True
    else:
        return False
    
def RunCommandsIn(commandlist, pkg_cfg, var_replacements):
    if len(commandlist) == 0: return
    with log:
        for package_cmd in commandlist:
            # Conditionals
            if isinstance(package_cmd, dict):
                result = None
                if 'if' in package_cmd: 
                    result = handleIf(package_cmd['if'], pkg_cfg, var_replacements)
                if 'if-not' in package_cmd: 
                    result = not handleIf(package_cmd['if-not'], pkg_cfg, var_replacements)
                if result is None: continue
                RunCommandsIn(package_cmd.get('then' if result else 'else', []), pkg_cfg, var_replacements)
                continue
            
            # Strings -> lists
            if isinstance(package_cmd, str):
                package_cmd = package_cmd.split(' ')
                    
            ccmd = [replace_vars(fragment, var_replacements) for fragment in package_cmd]
            command = ccmd[0]
            cmd(ccmd, echo=True, critical=True)
    
def aggregate(cfg, dir):
    job_cfg = yaml.load(os.path.join(dir, 'package.yml'))
    
if __name__ == '__main__':
    import argparse
        
    # logging.basicConfig(
    #    format='%(asctime)s [%(levelname)-8s]: %(message)s',
    #    datefmt='%m/%d/%Y %I:%M:%S %p',
    #    level=logging.INFO)
    #    # filename='logs/main.log',
    #    # filemode='w')
    
    # define a Handler which writes INFO messages or higher to the sys.stderr
    # console = logging.StreamHandler()
    # console.setLevel(logging.INFO)
    # logging.getLogger('').addHandler(console)
    
    # log = IndentLogger()
    
    d_cfg = {
             'env': {
                'distcc': {
                    'enabled': False,
                    'hosts': {}
                },
                'ccache': {
                    'enabled': False
                },
                'cotire': {
                    'enabled': False
                },
                'make': {
                    'jobs': 5,
                    'flags':[]
                },
                'packaging': {
                    'enabled': True,
                    'repo-deploy':True,
                    'maintainer':'Rob Nelson <nexisentertainment@gmail.com>',
                    'packages':{
                        'debian/jessie': True,
                        'debian/wheezy': False
                    },
                }
            },
            'bin':{
                'make':'make',
                'pump':'distcc-pump',
                'ccache':'ccache',
                'asm':'cc',
                'cc':'gcc-4.8',
                'cxx':'g++-4.8'
            },
            'paths':{
                'source':'../hhvm',
                'install': '/tmp/hhvm-install',
                'package': '/tmp/hhvm-package',
                'exts':{
                    'hhvm-pgsql' : '../hhvm-pgsql'
                },
            }
        }
    
    
    argp = argparse.ArgumentParser(prog='hhvm-build', description='Build HHVM')
    
    argp.add_argument('distro', type=str, help='Linux Distribution (deb, etc)')
    argp.add_argument('release', type=str, help='OS Release codename (precise, etc)')
    argp.add_argument('version', type=str, help='HHVM Version')
    
    argp.add_argument('hhvm_job', type=str, help='HHVM Jenkins workspace')
    # argp.add_argument('--ext', nargs='*' , help='HHVM extension workspace', default=[])
    
    argp.add_argument('-c','--config', type=str, default='config.yml', help='YAML file to read configuration from.')
    
    argp.add_argument('--disable-ccache', action='store_true')
    argp.add_argument('--disable-distcc', action='store_true')
    argp.add_argument('--disable-cotire', action='store_true')
    argp.add_argument('--disable-packaging', action='store_true')
    argp.add_argument('--disable-repo-deploy', action='store_true')
    argp.add_argument('--disable-git-clean', action='store_true')
    
    args = argp.parse_args()
    
    cfg = Config(args.config, d_cfg)
    
    if args.disable_ccache: cfg['env']['ccache']['enable'] = False
    if args.disable_distcc: cfg['env']['distcc']['enable'] = False
    if args.disable_cotire: cfg['env']['cotire']['enable'] = False
    if args.disable_packaging: cfg['env']['packaging']['enable'] = False
    if args.disable_repo_deploy: cfg['env']['packaging']['repo-deploy'] = False
    
    DISTRO_NAME = args.distro
    DISTRO_RELEASE = args.release
    
    HHVMBUILD_DIR = os.getcwd()
    DISTRO_DIR = os.path.join(HHVMBUILD_DIR, 'hhvm', DISTRO_NAME, DISTRO_RELEASE)
    
    HHVM_VERSION = args.version
    SOURCE_DIR = args.hhvm_job
    
    if not os.path.isdir(DISTRO_DIR):
        logging.fatal('Directory {0} doesn\'t exist.'.format(DISTRO_DIR))
        sys.exit(1)
        
    if SOURCE_DIR is None or not os.path.isdir(SOURCE_DIR):
        SOURCE_DIR = os.path.abspath(cfg.get('paths.source'))
        
    if not os.path.isdir(SOURCE_DIR):
        log.info('Source code not found. SOURCE_DIR={}'.format(SOURCE_DIR))
        sys.exit(1)
        
    INSTALL_DIR = os.path.abspath(cfg.get('paths.install'))
    mkdirOrClear(INSTALL_DIR)
        
    PACKAGE_DIR = os.path.abspath(cfg.get('paths.package'))
    mkdirOrClear(PACKAGE_DIR)
        
    NIGHTLY = False
    DEVONLY = False
    DEBUG = False
    
    version_chunks = HHVM_VERSION.split('-')
    new_version_chunks = []
    for i in range(len(version_chunks)):
        chunk = version_chunks[i]
        if i == 1 and chunk == 'nightly':
            NIGHTLY = True
            # new_version_chunks += [chunk]
            continue
        else:
            if chunk == 'dev':
                DEVONLY = True
                DEBUG = True
                continue
            if chunk == 'dbg':
                DEBUG = True
                continue
            new_version_chunks += [chunk]
    HHVM_VERSION = '-'.join(new_version_chunks)
    log.info('HHVM Version {} - Debug: {}, Dev: {}, Nightly: {}'.format(HHVM_VERSION, bool2yn(DEBUG), bool2yn(DEVONLY), bool2yn(NIGHTLY)))
    
    ENV.merge({
        'CC':  cfg.get('bin.cc', 'gcc-4.8'),
        'CXX': cfg.get('bin.cxx', 'g++-4.8'),
        'ASM': cfg.get('bin.asm', 'cc'),
    
        'CMAKE_INCLUDE_PATH':tempfile.mkstemp(),
        'CMAKE_LIBRARY_PATH':"/usr/lib/hhvm/" ,
        'HPHP_HOME':SOURCE_DIR
    })
    
    cmake = CMake()
    for k, v in cfg.get('env.cmake.flags', {}).items():
        cmake.setFlag(k, v) 
    
    MAKE_FLAGS = cfg.get('env.make.flags', [])
    
    cmake.setFlag('CMAKE_BUILD_TYPE', 'Debug' if DEBUG else 'Release')
    cmake.setFlag('CMAKE_INSTALL_PREFIX', '/usr')
    
    configure_ccache(cfg)
    configure_distcc(cfg)
    configure_cotire(cfg)

    job_flag = '-j' + str(cfg.get('env.cmake.jobs', 1))
    MAKE_FLAGS += [job_flag]
    NIGHTLY_DATE = datetime.datetime.utcnow().strftime('%Y.%m.%d')
    iteration = int(os.environ.get('BUILD_NUMBER', '1'))
    # NIGHTLY_DATE += '.{:02d}'.format(iteration)
    with Chdir(SOURCE_DIR) as sourcedir:
        with log.info('Compile environment:'):
            cmd(['uname', '-a'], echo=False)
            cmd(['lsb_release', '-a'], echo=False)
            cmd(['git', 'log', '-n', '1', '--pretty=oneline'], echo=False)
            
        hhvm_bin = os.path.join(SOURCE_DIR, 'hphp/hhvm/hhvm')
        if not os.path.isfile(hhvm_bin):
            log.warn('hhvm binaries not found, recompiling.')
            with log.info('Preparing to compile...'):
                if NIGHTLY:
                    cmd('git checkout master'.split(), critical=True)
                    REG_VERSION = re.compile(r'([0-9.]*-dev)')
                    version_file = ''
                    with open('hphp/system/idl/constants.idl.json', 'r') as f:
                        version_file = f.read()
                    with open('hphp/system/idl/constants.idl.json', 'w') as f:
                        f.write(REG_VERSION.sub('\1+' + NIGHTLY_DATE, version_file))
                    log.info('Version set.')
                else:
                    cmd(['git', 'checkout', 'HHVM-' + HHVM_VERSION], critical=True)
                    
                if not args.disable_git_clean:
                    cmd('git clean -fdx'.split(' '))
                
                cmd('git submodule update --init --recursive'.split(' '), critical=True)
            
            if not cmake.run(cfg.get('bin.cmake', 'cmake')):
                sys.exit(1)
                
            if not cmd([cfg.get('bin.make', 'make')] + MAKE_FLAGS, critical=True, echo=True):
                sys.exit(1)
        
        if not os.path.isfile(hhvm_bin):
            log.critical(hhvm_bin + " doesn't exist")
            sys.exit(1)
        
    with log.info('Packaging...'):
        if cfg.get('env.packaging.enabled', False):
            d_pkg_cfg = {
                'make-workspace':[],
                'fpm': {
                    'output-type':'deb'
                }
            }
            
            
            pkg_cfg = Config(os.path.join(DISTRO_DIR, 'package.yml'), d_pkg_cfg)
            with Chdir(SOURCE_DIR) as sourcedir:
                cmd([cfg.get('bin.make', 'make'), 'install', 'DESTDIR=' + INSTALL_DIR], critical=True)
                pkgname = 'hhvm'
                skeletondirname = 'skeleton'
                if DEVONLY:
                    pkgname += '-dev'
                    skeletondirname += '-dev'
                if NIGHTLY:
                    pkgname += '-nightly'
                if DEBUG and not DEVONLY:
                    pkgname += '-dbg'
                    
                if NIGHTLY:
                    version = NIGHTLY_DATE + '~' + ('debug' if DEBUG else 'release')
                    if DEBUG:
                        conflicts = replaces = ['hhvm', 'hhvm-nightly', 'hhvm-dbg']
                    else:
                        conflicts = replaces = ['hhvm', 'hhvm-dbg']
                else:
                    if DEBUG: conflicts = replaces = ['hhvm']
                    version = HHVM_VERSION + '~' + ('debug' if DEBUG else 'release')
            
            if len(pkg_cfg.get('make-workspace', [])) > 0 :
                log.info('Doing stuff to workspace...')
                RunCommandsIn(pkg_cfg.get('make-workspace', []), pkg_cfg, {
                    'SOURCE_DIR':SOURCE_DIR,
                    'DISTRO_DIR':DISTRO_DIR,
                    'INSTALL_DIR':INSTALL_DIR,
                    'PACKAGE_DIR':PACKAGE_DIR,
                    'DISTRO_DIR':DISTRO_DIR,
                    'SKELETON_DIR':os.path.join(HHVMBUILD_DIR, DISTRO_NAME, skeletondirname),
                    'HHVMBUILD_DIR':HHVMBUILD_DIR
                });

            package = ''
            pkgVersion = ''
                
            with Chdir(PACKAGE_DIR):
                fpm = FPM()
                fpm.input_type = 'dir'
                fpm.output_type = 'deb'
                with log.info('Loading ' + DISTRO_DIR + '/DEBIAN/control...'):
                    fpm.LoadControl(DISTRO_DIR + '/DEBIAN/control')
                with log.info('Figuring out version number...'):
                    while True:
                        pkgVersion = version
                        if iteration > 0:
                            pkgVersion += '-{}'.format(iteration)
                        package = os.path.join(HHVMBUILD_DIR, '{name}_{version}.{arch}.deb'.format(name=pkgname, version=pkgVersion, arch=fpm.architecture))
                        if not os.path.isfile(package):
                            break
                        log.warn('%s exists, increasing iterator and trying again.', package)
                        iterator += 1
                with log.info('Running FPM...'):
                    fpm.version = version
                    fpm.maintainer = cfg.get('env.packaging.maintainer', 'NOT SET <lol@idk.local>')
                    fpm.name = pkgname
                    fpm.provides = ['hhvm']
                    fpm.conflicts = conflicts
                    fpm.iteration = iteration
                    fpm.replaces = replaces
                    fpm.inputs = ['.']
                    fpm.workdir = PACKAGE_DIR
                    fpm.Build(package)
            
            if cfg.get('env.packaging.repo-deploy', True):
                with log.info('Adding package to repo...'):
                    cmd(['freight-add', package, 'apt/' + DISTRO_RELEASE], critical=True)
                    
                with log.info('Generating repository cache...'):
                    cmd(['freight-cache', '-p', '~/.gpass'])
